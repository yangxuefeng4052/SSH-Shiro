<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"  
	xmlns:jee="http://www.springframework.org/schema/jee" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd"
		>
		<!-- 开启注解扫描 -->
		<context:component-scan base-package="com.yxf.oa"></context:component-scan>
		<!-- 加载jdbc.properties
			web应用程序加载配置文件前面带上classpath
			表明是去类路径下加载
		 -->
		<context:property-placeholder location="classpath:jdbc.properties"/>
		<!-- 配置数据库连接池:c3p0 -->
		<bean id="c3p0" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
			<property name="jdbcUrl" value="${jdbc.url}"/>
			<property name="driverClass" value="${jdbc.driver}"/>
			<property name="user" value="${jdbc.username}"/>
			<property name="password" value="${jdbc.password}"/>
			<property name="maxPoolSize" value="50"/>
		</bean>
		<!-- 配置sessionFactoryBean
			相当于hibernate.cfg.xml文件中配置
			主要用于构建sessionFactory对象
		 -->
		<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
			<!-- 加载数据源 -->
			<property name="dataSource" ref="c3p0"/>
			<!-- hibernate其他配置信息 -->
			<property name="hibernateProperties">
				<props>
					<!-- 方言，必须配置 -->
					<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
					<!-- 是否显示sql -->
					<prop key="hibernate.show_sql">true</prop>
					<!-- 是否格式化显示sql -->
					<prop key="hibernate.format_sql">true</prop>	
					<prop key="hibernate.hbm2ddl.auto">update</prop>
					<!-- 自动提交事务 -->
					<prop key="hibernate.connection.autocommit">true</prop>
					
					<!-- 开启二级缓存 -->
					<prop key="hibernate.cache.use_second_level_cache">true</prop>
					<!-- 指定二级缓存提供商 -->
					<prop key="hibernate.cache.region.factory_class">
						org.hibernate.cache.ehcache.EhCacheRegionFactory
					</prop>
					<!-- 指定二级缓存配置文件 -->
					<prop key="hibernate.cache.configurationResourceName">
						ehcache.xml
					</prop>
					<!-- 开启查询缓存 -->
					<prop key="hibernate.cache.use_query_cache">true</prop>
					<!-- 给当前线程绑定事务 -->
					<prop key="hibernate.current_session_context_class">
						org.springframework.orm.hibernate4.SpringSessionContext
					</prop>
				</props>
			</property>
			<!-- 关联映射文件 -->
			 <property name="mappingLocations">
				<value>classpath:com/yxf/oa/bean/*.hbm.xml</value>
			</property> 
		</bean>
		<!-- 配置HibernateTemplate
			一个操作数据的对象
		 -->
		 <bean id="hibernateTemplate" class="org.springframework.orm.hibernate4.HibernateTemplate">
		 	<!-- 加载sessionFactory -->
		 	<property name="sessionFactory" ref="sessionFactory"></property>
		 </bean>
		
		<!-- 配置全局事务管理器
			让spring管理项目中的事务
			spring支持管理事务有两种方式：
				1.编程式事务:直接在代码中开启事务和提交事务，控制灵活
							但是不便于spring管理和维护
				2.声明式事务:使用springAOP来对事务进行管理，使用xml配置或者注解来对事务进行配置
							可以使业务逻辑代码和事务管理隔离，实现解耦合
		 -->
		 <bean id="txManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		 	<property name="sessionFactory" ref="sessionFactory"/>
		 </bean>
		 
		 <!-- 事务通知 -->
		<tx:advice id="txAcvice" transaction-manager="txManager">
			<!-- 配置事务的传播特性
				传播特性：当一个带有事务的业务方法去调用了另外一个业务方法的时候
						两个方法中的事务应该怎么处理
				事务传播特性总共有7种，默认是PROPAGATION_REQUIRED
			 -->
			<tx:attributes>
				<!-- 支持当前事务，如果当前方法没有事务则去创建一个 -->
				<tx:method name="add*" propagation="REQUIRED"/>
				<tx:method name="update*" propagation="REQUIRED"/>
				<tx:method name="delete*" propagation="REQUIRED"/>
				<tx:method name="find*" propagation="REQUIRED"/>
				<tx:method name="setNewPsw" propagation="REQUIRED" read-only="false"/>
				<tx:method name="checkEmail" propagation="REQUIRED" read-only="false"/>
			</tx:attributes>
		</tx:advice>
		
	 
		
		
		
		
		<!-- aop配置，给哪些类中哪些方法配置事务 -->
		 <aop:config>
			
			<aop:pointcut expression="execution(* com.yxf.oa.dao.*.*(..))"
			 id="pointCut"/>
			 
			<aop:advisor advice-ref="txAcvice" pointcut-ref="pointCut"/>
		</aop:config> 
		
		
		<!-- web.xml中shiro的filter对应的bean -->
    <!-- Shiro 的Web过滤器 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- 指定安全管理器 -->
        <property name="securityManager" ref="securityManager" />

        <!-- 如果没有认证将要跳转的登陆地址，http可访问的url，如果不在表单认证过虑器FormAuthenticationFilter中指定此地址就为身份认证地址 -->
        <!-- loginUrl认证提交地址，如果没有通过认证将会请求此地址进行认证，请求地址酱油formAuthenticationFilter进行表单认证 -->
        <property name="loginUrl" value="/loginCheck" />
		
		<!-- 登录成功跳转页面    -->
        <property name="successUrl" value="/turnToHome" /> 
		
        <!-- 认证通过后，指定如果没有权限跳转的地址 -->
        <property name="unauthorizedUrl" value="/login.jsp" />

        <!-- shiro拦截器配置 -->
        <property name="filters">
            <map>
                <entry key="authc" value-ref="formAuthenticationFilter" />
                <entry key="anon" value-ref="anon" />
            </map>
        </property> 

        <!-- 真正的filter，也是过滤链，从上向下顺序执行，一般都将/**放在最下边 -->
        <property name="filterChainDefinitions">
            <value>
                <!-- 所有的URL都可以匿名访问 -->
                /js/** = anon
		        /css/**  = anon
		        /img/**  = anon
		        /font-awesome/**  = anon
		        /validform/**  = anon
		        /login.jsp = anon
		        /resetPassword.jsp = anon
		        /sendEmail = anon
		        /checkCode = anon
                /** = authc
                /logout = logout
            </value>
        </property>
    </bean>
    
    <!-- 安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- 注入realm -->
        <property name="realm" ref="userRealm" />
    </bean>
    
    <bean id="anon" class="org.apache.shiro.web.filter.authc.AnonymousFilter"/>
    
    <!-- 自定义 realm -->
    <bean id="userRealm" class="com.yxf.oa.utils.UserRealm"></bean>
		
    <bean id="formAuthenticationFilter" class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter"></bean>
		
		
</beans>








